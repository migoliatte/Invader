import subprocess
import re  # https://regex101.com/
import os
import sys


def help():
    print("<---------- HELP ---------->")
    print("-h Affiche ce méssage")
    print("-v Active le mode verbosité")
    print("-vvv Active le mode haute verbosité (objdump)")
    print("-s Création de lu shellcode")
    print("-c compile exploit.c et le lance")
    print("Exemple : python "+sys.argv[0] +
          " -s ../final/asm/fnl_reverse_shell.asm")
    print("Exemple : python "+sys.argv[0]+" -c ../final/c/fnl_reverse_shell.c ")
    print("Exemple : python "+sys.argv[0] +
          " -c -s ../final/asm/fnl_reverse_shell.asm")
    print("<---------- HELP ---------->")
    exit()

def CheckNullBytes(verbose, shellcode, nbrLine):
    for i in range(0, len(shellcode), 2):
        if shellcode[i:i+2] == "00":
            print("Il y a un ou plusieurs NullBytes à la " +
                  str(nbrLine)+"ieme ligne de l'opcode : " + shellcode)
            return 1
    return 0

def objdump(verbose,  programme_Path, programme_Name):
    print("<---------- Lancement de ObjDump en cours ---------->")
    os.system("nasm -f elf "+programme_Path+programme_Name+".asm  && ld " +
              programme_Path+programme_Name+".o -m elf_i386 -o "+programme_Path+programme_Name)
    if(verbose):
        print("Lancement de la commande objdump -d "+programme_Path+programme_Name)
    objdump = subprocess.run(
        'objdump -d '+programme_Path+programme_Name, shell=True, stdout=subprocess.PIPE)
    objdump = objdump.stdout.decode("utf-8")
    if(verbose == 3):
        print("Resultat de OBJDUMP :"+objdump)
    objdump = objdump.replace("\t", "")
    result = re.findall(":[0-9a-f ]{21}", objdump)
    return result

def cleanOpCode(verbose, programme_Path, programme_Name):
    resultfinal = []
    nbrLine = 0
    nullByte = 0

    for res in objdump(verbose, programme_Path, programme_Name):
        nullByte += CheckNullBytes(verbose, res, nbrLine)
        resultfinal.append(res[1:].replace(" ", ""))
        nbrLine += 1

    print("<---------- Check des NUllsBytes en cours ---------->")
    if nullByte > 0:
        print("Des NullBytes ont été détécté.")
    elif(verbose):
        print("Aucun NullBytes dans ce shellcode ! ")

    print("<---------- Nettoyage de l'opcode en cours ---------->")
    resultfinal = "".join(resultfinal)

    if(verbose):
        print("Opcode nettoyé : "+resultfinal)
    return resultfinal

def shellcodeCreation(verbose, programme_Name, programme_Path):
    resultfinal = cleanOpCode(verbose, programme_Path, programme_Name)
    print("<---------- Génération de l'exploit en cours ---------->")
    exploit = ""
    for i in range(0, len(resultfinal), 2):
        exploit += "\\x"+resultfinal[i:i+2]
    print("Shellcode : ")
    print(exploit)
    if(verbose):
        print("Taille de l'exploit : "+str(int(len(resultfinal)/2)))
    return exploit

def lancementCodeC(verbose, programmeC_Name, programmeC_Path):
    print("<---------- Compilation et lancement de "+programmeC_Path+programmeC_Name+".c ---------->")
    
    if(verbose):
        print("Lancement de la commande gcc -o "+programmeC_Path+programmeC_Name+".out " +
              programmeC_Path+programmeC_Name+".c -z execstack -m32 -fno-stack-protector")
    os.system("gcc -o "+programmeC_Path+programmeC_Name+".out "+programmeC_Path +
              programmeC_Name+".c -z execstack -m32 -fno-stack-protector")
    if(verbose):
        print("Lancement de l'executable "+programmeC_Path+programmeC_Name)
    os.system(programmeC_Path+programmeC_Name+".out")

def createFileC(verbose,programmeC_Name,programmeC_Path,shellcode):
    print("<---------- Création du fichier "+programmeC_Path+programmeC_Name+".c ---------->")

    with open(programmeC_Path+programmeC_Name+".c", "w") as file:
        file.write('#include <stdio.h>\n#include <string.h>\n\n')
        file.write('int main(void)\n{\n')
        file.write('\tunsigned char code[] = \\\n')
        file.write('\t\"'+shellcode+'\" ;\n')
        file.write('\tprintf("Shellcode length: %d\\n", strlen(code)); \n')
        file.write('\tvoid (*s)() = (void *)code;\n\ts();\n')
        file.write('\treturn 0;\n}')
    if(verbose == 3):
        print("création du fichier C :")
        print('#include <stdio.h>\n#include <string.h>\n')
        print('int main(void)\n{')
        print('\tunsigned char code[] = \\')
        print('\t\"'+shellcode+'\" ;')
        print('\tprintf("Shellcode length: %d\\n", strlen(code)); ')
        print('\tvoid (*s)() = (void *)code;\n\ts();')
        print('\treturn 0;\n}')

def all(verbose, programmeC_Name,programmeC_Path):
    shellcode=shellcodeCreation(verbose,programmeC_Name,programmeC_Path)
    programmeC_Path=programmeC_Path.split("asm")
    programmeC_Path=programmeC_Path[0]+"c"+programmeC_Path[1]
    createFileC(verbose,programmeC_Name,programmeC_Path,shellcode)
    lancementCodeC(verbose,programmeC_Name,programmeC_Path)

def verifIfExploitIsSet(programmeC_Name, programmeC_Path):
    result = input("Avez vous pensé à changer la variable 'shellcode' de "+programmeC_Path+programmeC_Name+".c ([y/yes/o/oui]/[n/no/non]) :  ")
    result = result.lower()
    if(result == "y" or result == "yes" or result == "o" or result == "oui" or result == ""):
        print("Très bien, continuons !")
    elif(result == "n" or result == "no" or result == "non"):
        print("Allez le modifier !")
        exit()
    else:
        print("Merci de répondre y/yes/o/oui ou n/no/non merci !")
        exit()

def nameCleaner(verbose,fileName):
    print("<---------- Creation des noms de fichiers ---------->")
    if(verbose):
        print("fileName : "+fileName)
    programmeName = fileName.split("/")
    programmePath = ""
    arrayName = []
    for i in range(0, len(programmeName)-1):
        programmePath += programmeName[i]+"/"
    programmeName = programmeName[len(programmeName)-1]
    programmeName = programmeName.split(".asm")
    programmeName = programmeName[0].split(".c")
    programmeName = programmeName[0]
    if(verbose):
        print("programmeName : "+programmeName)
        print("programmePath : "+programmePath)
    arrayName.append(programmeName)
    arrayName.append(programmePath)
    return arrayName

def recupArgument(verbose, fileName):
    print("<---------- Récupération du nom du fichier en cours ---------->")
    file_test = subprocess.run(
        "ls "+fileName, shell=True, stdout=subprocess.PIPE)
    exist = 0
    name = ""
    if(file_test.returncode != 0 or fileName == "" or fileName.find("-") == 0):
        while exist == 0:
            os.system(
                "echo Vous êtes actuellement ici : $(pwd), dans votre dossier il y a : $(ls)")
            name = input("Entrez le nom du fichier :")
            file_test = subprocess.run(
                "ls "+name, shell=True, stdout=subprocess.PIPE)
            if(file_test.returncode != 0 or name == "" or name.find("-") == 0):
                print("Le fichier "+name+" n'existe pas !")
            else:
                exist = 1
    else:
        return fileName
    return name

def menu():
    nameFile = ""
    array = [0, 0, 0, 0, ""]
    for i in range(0, len(sys.argv)):
        if str(sys.argv[i]) == "-h":
            array[0] = 1
        elif str(sys.argv[i]) == "-v":
            array[3] = 1
        elif str(sys.argv[i]) == "-vvv":
            array[3] = 3
        elif str(sys.argv[i]) == "-s":
            array[1] = 1
            if(len(sys.argv) > i+1):
                array[4] = sys.argv[i+1]
        elif str(sys.argv[i]) == "-c":
            array[2] = 1
            if(len(sys.argv) > i+1):
                array[4] = sys.argv[i+1]
    return array

def main():
    menuResult = menu()
    if menuResult[0] == 1:
        help()
    else:
        fileName = recupArgument(menuResult[3], menuResult[4])
        arrayName = nameCleaner(menuResult[3],fileName)

        if menuResult[1] == 1 and menuResult[2] == 1:
            all(menuResult[3], arrayName[0], arrayName[1])
        elif menuResult[1] == 1:
            shellcodeCreation(menuResult[3], arrayName[0], arrayName[1])
        elif menuResult[2] == 1:
            verifIfExploitIsSet(arrayName[0], arrayName[1])
            lancementCodeC(menuResult[3], arrayName[0], arrayName[1])
            exit()
        else:
            help()

if __name__ == "__main__":
    main()